using System;
using System.Drawing;
using System.Windows.Forms;
using static System.Net.Mime.MediaTypeNames;
namespace Hd_Knem
{
    public partial class Form1 : Form
    {
        int N;
        int M;
        int X;
        int Y;
        Pen pen = new Pen(Color.Red, 4);
        System.Drawing.Font font = new System.Drawing.Font("Arial", 14, FontStyle.Regular);
        public Form1()
        {
            InitializeComponent();
            textBox1.Text = "5";
            textBox2.Text = "5";
            textBox3.Text = "3";
            textBox4.Text = "3";
        }

        private void label2_Click(object sender, EventArgs e)
        {

        }

        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void label3_Click(object sender, EventArgs e)
        {

        }

        private void button1_Click(object sender, EventArgs e)
        {

            if (textBox1.Text == "" || textBox2.Text == "" || textBox3.Text == "" || textBox4.Text == "")
            {
                MessageBox.Show("Надо чёто ввести");
            }
            else
            {
                N = int.Parse(textBox1.Text);
                M = int.Parse(textBox2.Text);
                X = int.Parse(textBox3.Text);
                Y = int.Parse(textBox4.Text);                
            }

            if (N > 10 || M > 10)
            {
                MessageBox.Show("N и M не должны превышать 10");
            }
            else if (X > N || Y > M)
            {
                MessageBox.Show("X и Y не должны превышать N и M");
            }
            else
            {
                int i = 0;
                Graphics g = pictureBox.CreateGraphics();
                g.Clear(Color.White);
                for (i = 0; i < M; i++)
                {
                    for (int l = i % 2; l < N; l += 2)
                    {

                        SolidBrush brush = new SolidBrush(Color.Black);
                        g.FillRectangle(brush, 50 * l, 50 * i, 50, 50);
                    }

                }
                int[] data = new int[N * M];
                int d = 0;
                for (int n = 1; n <= N; n++)
                {
                    for (int m = 1; m <= M; m++)
                    {
                        data[d] = m * 10 + n;
                        d++;
                    }
                }                
                int pos = Y * 10 + X;
                int re1 = -300;
                int re2 = -300;
                d = -300;
                int[] way = new int[N * M];

                way[0] = pos;
                d = Array.IndexOf(data, way[0]);
                data[d] = -300;
                //label4.Text = pos.ToString();
                //label4.Text = data[3].ToString();
                i = 1;
                int b = 0;
                //for (i=0; i < N * M;)
                //{
                //    if (Array.Find(data, elem => elem == pos + 12) == pos + 12 && (pos + 12 - 1) % 10 > pos % 10 - 1)
                //    {
                //        way[i] = pos + 12;
                //        d = Array.IndexOf(data, way[i]);
                //        data[d] = -300;
                //        if (cn(way[i], i + 1) == 1)
                //        {
                //            return 1;
                //        }
                //        data[Array.IndexOf(data, -300)] = way[i];
                //    }
                //    else if (Array.Find(data, elem => elem == pos + 21) == pos + 21 && (pos + 21 - 1) % 10 > pos % 10 - 1)
                //    {
                //        way[i] = pos + 21;
                //        d = Array.IndexOf(data, way[i]);
                //        data[d] = -300;
                //        if (cn(way[i], i + 1) == 1)
                //        {
                //            return 1;
                //        }
                //        data[Array.IndexOf(data, -300)] = way[i];
                //    }
                //    else if(Array.Find(data, elem => elem == pos + 19) == pos + 19 && (pos + 19 - 1) % 10 < pos % 10 - 1)
                //    {
                //        way[i] = pos + 19;
                //        d = Array.IndexOf(data, way[i]);
                //        data[d] = -300;
                //        if (cn(way[i], i + 1) == 1)
                //        {
                //            return 1;
                //        }
                //        data[Array.IndexOf(data, -300)] = way[i];
                //    }
                //    else if(Array.Find(data, elem => elem == pos + 8) == pos + 8 && (pos + 8 - 1) % 10 < pos % 10 - 1)
                //    {
                //        way[i] = pos + 8;
                //        d = Array.IndexOf(data, way[i]);
                //        data[d] = -300;
                //        if (cn(way[i], i + 1) == 1)
                //        {
                //            return 1;
                //        }
                //        data[Array.IndexOf(data, -300)] = way[i];
                //    }
                //    else if(Array.Find(data, elem => elem == pos - 12) == pos - 12 && pos - 12 != 0 && (pos - 12 - 1) % 10 < pos % 10 - 1)
                //    {
                //        way[i] = pos - 12;
                //        d = Array.IndexOf(data, way[i]);
                //        data[d] = -300;
                //        if (cn(way[i], i + 1) == 1)
                //        {
                //            return 1;
                //        }
                //        data[Array.IndexOf(data, -300)] = way[i];
                //    }
                //    else if(Array.Find(data, elem => elem == pos - 21) == pos - 21 && pos - 21 != 0 && (pos - 21 - 1) % 10 < pos % 10 - 1)
                //    {
                //        way[i] = pos - 21;
                //        d = Array.IndexOf(data, way[i]);
                //        data[d] = -300;
                //        if (cn(way[i], i + 1) == 1)
                //        {
                //            return 1;
                //        }
                //        data[Array.IndexOf(data, -300)] = way[i];

                //    }
                //    else if(Array.Find(data, elem => elem == pos - 19) == pos - 19 && pos - 19 != 0 && (pos - 19 - 1) % 10 > pos % 10 - 1)
                //    {
                //        way[i] = pos - 19;
                //        d = Array.IndexOf(data, way[i]);
                //        data[d] = -300;
                //        if (cn(way[i], i + 1) == 1)
                //        {
                //            return 1;
                //        }
                //        data[Array.IndexOf(data, -300)] = way[i];
                //    }
                //    else if(Array.Find(data, elem => elem == pos - 8) == pos - 8 && pos - 8 != 0 && (pos - 8 - 1) % 10 > pos % 10 - 1)
                //    {
                //        way[i] = pos - 8;
                //        d = Array.IndexOf(data, way[i]);
                //        data[d] = -300;
                //        if (cn(way[i], i + 1) == 1)
                //        {
                //            return 1;
                //        }
                //        data[Array.IndexOf(data, -300)] = way[i];
                //    }
                //}

                //label6.Text = i.ToString();


                int cn(int pos, int i)
                {
                    //if (b >= 100000)
                    //{
                    //    return 0;
                    //}
                    //b++;
                    if (i == N * M)
                    {
                        return 1;
                    }
                    if (Array.Find(data, elem => elem == pos + 12) == pos + 12 && (pos + 12 - 1) % 10 > pos % 10 - 1)
                    {
                        way[i] = pos + 12;
                        d = Array.IndexOf(data, way[i]);
                        data[d] = -300;
                        if (cn(way[i], i + 1) == 1)
                        {
                            return 1;
                        }
                        data[Array.IndexOf(data, -300)] = way[i];
                    }
                    if (Array.Find(data, elem => elem == pos + 21) == pos + 21 && (pos + 21 - 1) % 10 > pos % 10 - 1)
                    {
                        way[i] = pos + 21;
                        d = Array.IndexOf(data, way[i]);
                        data[d] = -300;
                        if (cn(way[i], i + 1) == 1)
                        {
                            return 1;
                        }
                        data[Array.IndexOf(data, -300)] = way[i];
                    }
                    if (Array.Find(data, elem => elem == pos + 19) == pos + 19 && (pos + 19 - 1) % 10 < pos % 10 - 1)
                    {
                        way[i] = pos + 19;
                        d = Array.IndexOf(data, way[i]);
                        data[d] = -300;
                        if (cn(way[i], i + 1) == 1)
                        {
                            return 1;
                        }
                        data[Array.IndexOf(data, -300)] = way[i];
                    }
                    if (Array.Find(data, elem => elem == pos + 8) == pos + 8 && (pos + 8 - 1) % 10 < pos % 10 - 1)
                    {
                        way[i] = pos + 8;
                        d = Array.IndexOf(data, way[i]);
                        data[d] = -300;
                        if (cn(way[i], i + 1) == 1)
                        {
                            return 1;
                        }
                        data[Array.IndexOf(data, -300)] = way[i];
                    }
                    if (Array.Find(data, elem => elem == pos - 12) == pos - 12 && pos - 12 != 0 && (pos - 12 - 1) % 10 < pos % 10 - 1)
                    {
                        way[i] = pos - 12;
                        d = Array.IndexOf(data, way[i]);
                        data[d] = -300;
                        if (cn(way[i], i + 1) == 1)
                        {
                            return 1;
                        }
                        data[Array.IndexOf(data, -300)] = way[i];
                    }
                    if (Array.Find(data, elem => elem == pos - 21) == pos - 21 && pos - 21 != 0 && (pos - 21 - 1) % 10 < pos % 10 - 1)
                    {
                        way[i] = pos - 21;
                        d = Array.IndexOf(data, way[i]);
                        data[d] = -300;
                        if (cn(way[i], i + 1) == 1)
                        {
                            return 1;
                        }
                        data[Array.IndexOf(data, -300)] = way[i];

                    }
                    if (Array.Find(data, elem => elem == pos - 19) == pos - 19 && pos - 19 != 0 && (pos - 19 - 1) % 10 > pos % 10 - 1)
                    {
                        way[i] = pos - 19;
                        d = Array.IndexOf(data, way[i]);
                        data[d] = -300;
                        if (cn(way[i], i + 1) == 1)
                        {
                            return 1;
                        }
                        data[Array.IndexOf(data, -300)] = way[i];
                    }
                    if (Array.Find(data, elem => elem == pos - 8) == pos - 8 && pos - 8 != 0 && (pos - 8 - 1) % 10 > pos % 10 - 1)
                    {
                        way[i] = pos - 8;
                        d = Array.IndexOf(data, way[i]);
                        data[d] = -300;
                        if (cn(way[i], i + 1) == 1)
                        {
                            return 1;
                        }
                        data[Array.IndexOf(data, -300)] = way[i];
                    }
                    //label6.Text = i.ToString();

                    return 0;


                }
                if (cn(pos, 1) == 1)
                {
                    label6.Text = "Решение есть";
                }
                else
                {
                    label6.Text = "Решений т";
                }
                //for (int i = 1; i < N * M; i++)
                //{
                //    for (int b = 0; b < data.Length; b++)
                //    {
                //        if (data[b] == pos)
                //        {
                //            data[b] = -300;
                //            break;
                //        }
                //    }
                //    if (re1 != -300)
                //    {
                //        re2 = re1;
                //        re1 = -300;
                //    }
                //    if (Array.Find(data, elem => elem == pos + 12) == pos + 12)
                //    {
                //        way[i] = pos + 12;
                //        pos = way[i];

                //    }
                //    else if (Array.Find(data, elem => elem == pos + 21) == pos + 21)
                //    {

                //        way[i] = pos + 21;
                //        pos = way[i];
                //    }
                //    else if (Array.Find(data, elem => elem == pos + 19) == pos + 19)
                //    {

                //        way[i] = pos + 19;
                //        pos = way[i];
                //    }
                //    else if (Array.Find(data, elem => elem == pos + 8) == pos + 8)
                //    {

                //        way[i] = pos + 8;
                //        pos = way[i];
                //    }
                //    else if (Array.Find(data, elem => elem == pos - 12) == pos - 12 && pos - 12 != 0)
                //    {

                //        way[i] = pos - 12;
                //        pos = way[i];
                //        //label4.Text = pos.ToString();
                //    }
                //    else if (Array.Find(data, elem => elem == pos - 21) == pos - 21 && pos - 21 != 0)
                //    {
                //        way[i] = pos - 21;
                //        pos = way[i];
                //        //label4.Text = Array.Find(data, elem => elem == pos - 21).ToString();

                //    }
                //    else if (Array.Find(data, elem => elem == pos - 19) == pos - 19 && pos - 19 != 0)
                //    {
                //        way[i] = pos - 19;
                //        pos = way[i];
                //    }
                //    else if (Array.Find(data, elem => elem == pos - 8) == pos - 8 && pos - 8 != 0)
                //    {

                //        way[i] = pos - 8;
                //        pos = way[i];
                //    }
                //    else
                //    {                        
                //        pos = way[i - 1];
                //        re1 = pos;
                //        i -= 2;
                //    }
                //    if (re2 != -300)
                //    {
                //        label6.Text = re2.ToString();
                //        for (int p = 0; p < data.Length; p++)
                //        {
                //            if (data[p] == -300)
                //            {
                //                data[p] = re2;
                //                break;
                //            }
                //        }
                //        re2 = -300;
                //    }
                //    //label6.Text = i.ToString();
                //    if (i < 1)
                //    {
                //        label6.Text = "Решений т";
                //        break;
                //    }
                //    else if (i == N * M - 1)
                //    {
                //        //label6.Text = i.ToString();
                //        label6.Text = "Решение есть";
                //    }
                //}
                int a;
                Pen Pen = new Pen(Color.Red, 1);
                for (i = 0; i < way.Length; i++)
                {
                    a = i+1;
                    g.DrawString(a.ToString(), font, Brushes.Red, (way[i] - 11) % 10 * 50, (way[i] - 11) / 10 * 50);
                    //if (i != 0)
                    //{
                    //    g.DrawLine(Pen, way[i - 1] % 10 * 50 - 50, way[i - 1] / 10 * 50 - 50, way[i] % 10 * 50 - 50, way[i] / 10 * 50 - 50);

                    //}
                }
                //int a = way[5] % 10 * 50;
                //label4.Text = way[8].ToString();

            }


        }

        private void label5_Click(object sender, EventArgs e)
        {

        }

        private void label6_Click(object sender, EventArgs e)
        {

        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }

        private void pictureBox_Click(object sender, EventArgs e)
        {

        }

        private void label6_Click_1(object sender, EventArgs e)
        {

        }
    }
}
